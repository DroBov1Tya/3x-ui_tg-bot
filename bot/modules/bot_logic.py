import base64
import logging
from modules import BTN, api
from config import logger
#|=============================[Menu]=============================|
#–°–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã start
async def start_cmd(message):
        # get user info
        userinfo = await api.user_info(message.chat.id)
        # if user not found
        if not userinfo["Success"]:
            # init agree button
            markup = BTN.agree(message.chat.id)
            # agreement message text
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'
        # if user found
        else: 
            text, markup = await menu_cmd(message)
        return text, markup
#--------------------------------------------------------------------------
# –°–æ–±–∏—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã Menu
async def menu_cmd(message):
    tgid = message.chat.id
    text, markup = f'''
<b>Welcome to Spoof VeilVoyager üåå</b>
_______________________

üöÄ **Streamline your VPN setup effortlessly!**  
Experience seamless connectivity at your fingertips.

<b>Features:</b>
‚ú® <i>Create VPN configurations with a single click</i>

<b>Beta 0.5</b>
''', BTN.menu(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def learn_more(tgid):
    text, markup = f'''
Our VPN Features:

üåç Unlimited access:
Bypass restrictions and enjoy your favorite websites and apps without interruptions.

‚ö° Fast speed:
Up to 300 Mbps, ensuring smooth browsing and streaming.

üîí Data protection:
Secure your connection with encryption, especially on public Wi-Fi.

üì± Multi-device support:
Use one account across all your devices ‚Äì iOS, Android, Windows, and macOS.

üõ°Ô∏è Advanced security:
VLESS protocol keeps your traffic invisible and secure.

üíº Global servers:
Access servers in the US, Europe, and Asia for stable and fast connections.

üîê Privacy assured:
Stay anonymous online, with the option to pay via cryptocurrency for extra security.

Simple, reliable, and secure.
    ''', BTN.back(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def create_config(message, hostname):
    try:
        tgid = message.chat.id
        data, qr_file = await api.create_config(message, hostname)
        if not data:
            text = "Your subscription has expired, would you like to renew it?"
            markup = BTN.pay_subscription(tgid)
            markup_delete = BTN.delete_message(tgid)
            return text, markup, markup_delete, None
        else:
            print("111")
            config = data["config"]

            text, markup, markup_delete = f"{config}", BTN.menu(tgid), BTN.delete_message(tgid)
            return text, markup, markup_delete, qr_file
    
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å
        logger.error(f"Error in create_config: {str(e)}")
        text = "An error occurred while generating the configuration. Please try again later."
        markup = BTN.menu(tgid)
        markup_delete = BTN.delete_message(tgid)
        return text, markup, markup_delete, None
#--------------------------------------------------------------------------
async def config_menu(tgid):
    servers = await api.servers_count()
    text, markup = '''
<b>üè¥ Choose VPN country üè¥</b>
''', BTN.config_menu(tgid, servers)
    return text, markup
#--------------------------------------------------------------------------
async def account_menu(tgid):
    text, markup = '''
<b>üë§ Account</b>
Manage your account settings and access various features:

- <i>Top up balance</i> to ensure uninterrupted service.

- <i>Pay subscription</i> to continue enjoying our premium features.

- <i>Settings</i> to customize your experience.

''', BTN.account_menu(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def top_up_ballance(tgid):
    text, markup = '''
<b>üí∏ Pay Methods</b>
We accept payments through the following methods:

- <i>Cryptocurrency</i> for instant and anonymous transactions.

''', BTN.top_up_ballance(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def pay_subscription(tgid):
    text, markup = '''
<b>üìÖ Subscription Options</b>
Choose the subscription plan that best suits your needs and enjoy uninterrupted access to our services:

- <i>1 Month Subscription</i>: Perfect for those who want to try out our features.

- <i>6 Months Subscription</i>: A great choice for long-term users looking for value.

- <i>1 Year Subscription</i>: Best for frequent users who want to maximize savings.

''', BTN.pay_subscription(tgid)
    return text, markup
#--------------------------------------------------------------------------


#|=============================[admins panel]=============================|
#–ê–¥–º–∏–Ω–∫–∞
async def admins_cmd(message):
    tgid = message.chat.id
    text, markup = '''
–ê–¥–º–∏–Ω - –ø–∞–Ω–µ–ª—å
<i>–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–æ–≤</i>
''', BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_create_voucher(message):
    tgid = message.chat.id
    text, markup = '''
<b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–æ–≤</b>
<i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∞—É—á–µ—Ä –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—É—á–µ—Ä:</i>

- <b>‚è≥ 1 Month</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏.

- <b>üï∞Ô∏è 6 Months</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏.

- <b>üåç 1 Year</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 1 –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.

–ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞.
''', BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_users(message):
    tgid = message.chat.id
    text, markup = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", BTN.admin_users_menu(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_ban(message, target):
    tgid = message.chat.id
    await api.admin_ban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω", BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_unban(message):
    tgid = message.chat.id
    target = await api.fetch_target(tgid)
    await api.admin_unban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω", BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_add_user(message, target):
    await api.admin_unban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω", BTN.admin(message.chat.id)
    await message.bot.send_message(chat_id=target, text = '''
<b>üè¥ –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω üè¥</b>
–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
''', reply_markup=BTN.menu(target))
    return text, markup

#|=============================[Admin Vouchers create]=============================|
async def admin_create_voucher_one(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_one()
    vaucher_code = r.get("voucher")
    text, markup = vaucher_code, BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_create_voucher_six(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_six()
    vaucher_code = r.get("voucher")
    text, markup = vaucher_code, BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_create_voucher_year(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_year()
    vaucher_code = r.get("voucher")
    text, markup = vaucher_code, BTN.admin_create_voucher(tgid)
    return text, markup
