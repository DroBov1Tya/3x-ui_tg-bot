import base64
import logging
import time
from modules import lang_text
from modules import BTN, api
from config import logger
#|=============================[Menu]=============================|
#–°–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã start
async def start_cmd(message):
        userinfo = await api.user_info(message.chat.id)

        if userinfo["Success"]:
            text, markup = lang_text.language, BTN.choose_language(message.chat.id)
            return text, markup
        
        else: 
            text, markup = lang_text.user_agreement, BTN.user_agreement(message.chat.id)
            return text, markup
#--------------------------------------------------------------------------

async def agree(tgid):
    await api.agree(tgid)
    text, markup = await language_cmd(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def decline(tgid):
    text, markup = lang_text.decline, BTN.user_agreement(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def language_cmd(tgid):
    text, markup = '''
For the best experience, you can choose the bot's language. üåê
''', BTN.choose_language(tgid)
    return text, markup
#--------------------------------------------------------------------------

# –°–æ–±–∏—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã Menu
async def menu_cmd(message):
    tgid = message.chat.id
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.menu_en, BTN.menu(tgid)
        return text, markup
    
    elif language.get("lang") == "ru":
        text, markup = lang_text.menu_ru, BTN.menu_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------

async def help_cmd(tgid):
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.help_cmd_en, BTN.help(tgid)
        return text, markup
    elif language.get("lang") == "ru":
        text, markup = lang_text.help_cmd_ru, BTN.help_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------

async def learn_more(tgid: int):
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.learn_more_en, BTN.back(tgid)
        return text, markup
    elif language.get("lang") == "ru":
        text, markup = lang_text.learn_more_ru, BTN.back_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------

async def create_config(message, hostname):
    tgid = message.chat.id
    language = await api.check_language(tgid)
    try:
        if language.get("lang") == "en":
            data, qr_file = await api.create_config(message, hostname)
            if not data:
                text = "Your subscription has expired, would you like to renew it?"
                markup = BTN.pay_subscription(tgid)
                markup_delete = BTN.delete_message(tgid)
                return text, markup, markup_delete, None
            else:
                config = data["config"]

                text, markup, markup_delete = f"{config}", BTN.menu(tgid), BTN.delete_message(tgid)
                return text, markup, markup_delete, qr_file
            
        elif language.get("lang") == "ru":
            data, qr_file = await api.create_config(message, hostname)
            if not data:
                text = "Your subscription has expired, would you like to renew it?"
                markup = BTN.pay_subscription_ru(tgid)
                markup_delete = BTN.delete_message_ru(tgid)
                return text, markup, markup_delete, None
            else:
                config = data["config"]

                text, markup, markup_delete = f"{config}", BTN.menu_ru(tgid), BTN.delete_message_ru(tgid)
                return text, markup, markup_delete, qr_file
    
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å
        logger.error(f"Error in create_config: {str(e)}")
        if language.get("lang") == "en":
            text = "An error occurred while generating the configuration. Please try again later."
            markup = BTN.menu(tgid)
            markup_delete = BTN.delete_message(tgid)
            return text, markup, markup_delete, None
        elif language.get("lang") == "ru":
            text = "An error occurred while generating the configuration. Please try again later."
            markup = BTN.menu_ru(tgid)
            markup_delete = BTN.delete_message_ru(tgid)
            return text, markup, markup_delete, None
#--------------------------------------------------------------------------

async def config_menu(tgid: int):
    servers = await api.servers_count()
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.config_menu_en, BTN.config_menu(tgid, servers)
        return text, markup
    elif language.get("lang") == "ru":
        text, markup = lang_text.config_menu_ru, BTN.config_menu_ru(tgid, servers)
        return text, markup
#--------------------------------------------------------------------------

async def account_menu(tgid: int):
    balance = await api.getbalance(tgid)
    subsctiption = await api.getsubsctiption(tgid)
    language = await api.check_language(tgid)
    current_time = int(time.time())

    balance = balance.get("balance", 0)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
    if language.get("lang") == "en":
        subscription_status = await format_subscription_status(subsctiption.get("subscription"), current_time)
        text = await lang_text.account_menu_en(balance, subscription_status)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
        markup = BTN.account_menu(tgid)
        return text, markup
    
    elif language.get("lang") == "ru":
        subscription_status = await format_subscription_status_ru(subsctiption.get("subscription"), current_time)
        text = await lang_text.account_menu_ru(balance, subscription_status)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
        markup = BTN.account_menu_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------

async def top_up_balance(tgid: int):
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.top_up_balance_en, BTN.top_up_balance(tgid)
        return text, markup
    
    elif language.get("lang") == "ru":
        text, markup = lang_text.top_up_balance_ru, BTN.top_up_balance_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------

async def pay_subscription(tgid: int):
    language = await api.check_language(tgid)
    if language.get("lang") == "en":
        text, markup = lang_text.pay_subscription_en, BTN.pay_subscription(tgid)
        return text, markup
    elif language.get("lang") == "ru":
        text, markup = lang_text.pay_subscription_ru, BTN.pay_subscription_ru(tgid)
        return text, markup
#--------------------------------------------------------------------------


#|=============================[admins panel]=============================|
#–ê–¥–º–∏–Ω–∫–∞
async def admins_cmd(message):
    tgid = message.chat.id
    text, markup = '''
–ê–¥–º–∏–Ω - –ø–∞–Ω–µ–ª—å
<i>–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–æ–≤</i>
''', BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------
async def admin_create_voucher(message):
    tgid = message.chat.id
    text, markup = '''
<b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–æ–≤</b>
<i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∞—É—á–µ—Ä –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—É—á–µ—Ä:</i>

- <b>‚è≥ 1 Month</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏.

- <b>üï∞Ô∏è 6 Months</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏.

- <b>üåç 1 Year</b>: –°–æ–∑–¥–∞—ë—Ç –≤–∞—É—á–µ—Ä –Ω–∞ 1 –≥–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.

–ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞.
''', BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_users(message):
    tgid = message.chat.id
    text, markup = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", BTN.admin_users_menu(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_ban(message, target):
    tgid = message.chat.id
    await api.admin_ban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω", BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_unban(message):
    tgid = message.chat.id
    target = await api.fetch_target(tgid)
    await api.admin_unban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω", BTN.admin(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_add_user(message, target):
    await api.admin_unban(target)
    text, markup = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω", BTN.admin(message.chat.id)
    await message.bot.send_message(chat_id=target, text = '''
<b>üè¥ –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω üè¥</b>
–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
''', reply_markup=BTN.menu(target))
    return text, markup

#|=============================[Admin Vouchers create]=============================|
async def admin_create_voucher_one(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_one()
    vaucher_code = r.get("voucher")
    text, markup = f"üéÅ <b>1 month voucher code:</b> <code>{vaucher_code}</code>", BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_create_voucher_six(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_six()
    vaucher_code = r.get("voucher")
    text, markup = f"üéÅ< b>6 month voucher code:</> <code>{vaucher_code}</code>", BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------

async def admin_create_voucher_year(message):
    tgid = message.chat.id
    r = await api.admin_create_voucher_year()
    vaucher_code = r.get("voucher")
    text, markup = f"üéÅ <b>1 year voucher code:</b> <code>{vaucher_code}</code>", BTN.admin_create_voucher(tgid)
    return text, markup
#--------------------------------------------------------------------------

#|=============================[SRC]=============================|
async def format_subscription_status(subscription_end: int, current_time: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
    """
    diff = subscription_end - current_time

    if diff <= 0:
        return "‚ùå Your subscription has ended."

    days = diff // 86400
    hours = (diff % 86400) // 3600
    minutes = (diff % 3600) // 60

    if diff % 60 > 0:
        minutes += 1

    remaining_time_parts = []

    if days > 0:
        remaining_time_parts.append(f"üóìÔ∏è {days} day{'s' if days > 1 else ''}")
    if hours > 0:
        remaining_time_parts.append(f"‚è∞ {hours} hour{'s' if hours > 1 else ''}")
    if minutes > 0:
        remaining_time_parts.append(f"‚åõ {minutes} minute{'s' if minutes > 1 else ''}")

    remaining_time = ', '.join(remaining_time_parts)

    return f"Subscription ends in {remaining_time}." if remaining_time else "‚åõ Less than a minute left."
#--------------------------------------------------------------------------

async def format_subscription_status_ru(subscription_end: int, current_time: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏.
    """
    diff = subscription_end - current_time

    if diff <= 0:
        return "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."

    days = diff // 86400
    hours = (diff % 86400) // 3600
    minutes = (diff % 3600) // 60

    if diff % 60 > 0:
        minutes += 1

    remaining_time_parts = []

    if days > 0:
        remaining_time_parts.append(f"üóìÔ∏è {days} –¥–µ–Ω—å{'a' if days > 1 else ''}")
    if hours > 0:
        remaining_time_parts.append(f"‚è∞ {hours} —á–∞—Å{'a' if hours > 1 else ''}")
    if minutes > 0:
        remaining_time_parts.append(f"‚åõ {minutes} –º–∏–Ω—É—Ç{'—ã' if minutes > 1 else ''}")

    remaining_time = ', '.join(remaining_time_parts)

    return f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {remaining_time}." if remaining_time else "‚åõ –û—Å—Ç–∞–ª–∞—Å—å –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã."

#--------------------------------------------------------------------------

async def set_language(message, lang):
    tgid = message.chat.id

    await api.set_language(tgid, lang)
    text, markup = await menu_cmd(message)
    return text, markup
#--------------------------------------------------------------------------