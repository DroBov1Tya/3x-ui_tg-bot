import logging
from modules import bot_logic, api
from aiogram import Bot, types, F, Dispatcher, Router
from aiogram.filters.command import Command
from aiogram.types.input_file import InputFile
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from middlewares.message_middleware import message_middleware
from middlewares.callback_middleware import callback_middleware
from middlewares.inline_middleware import inline_middleware
from modules import lang_text

router = Router()

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class VoucherStates(StatesGroup):
    waiting_for_voucher = State()

router.message.middleware(message_middleware())
router.callback_query.middleware(callback_middleware())
router.inline_query.middleware(inline_middleware())

#|=============================[Commands]=============================|
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ /start
@router.message(Command('start'))
async def start(message: types.Message):
    text, markup = await bot_logic.start_cmd(message)
    await message.answer(text, reply_markup=markup)
#--------------------------------------------------------------------------

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ /menu
@router.message(Command('menu'))
async def menu(message: types.Message):
    text, markup = await bot_logic.menu_cmd(message)
    await message.answer(text, reply_markup=markup)
#--------------------------------------------------------------------------

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /voucher
@router.message(Command("voucher"))
async def start_voucher_process(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /voucher. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –≤–∞—É—á–µ—Ä–∞.
    """
    language = await api.check_language(message.chat.id)
    if language.get("lang") == "en":
        await message.answer("üé´ Enter voucher code:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞
        await state.set_state(VoucherStates.waiting_for_voucher)
    elif language.get("lang") == "ru":
        await message.answer("üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞
        await state.set_state(VoucherStates.waiting_for_voucher)

@router.message(StateFilter(VoucherStates.waiting_for_voucher))
async def process_voucher_input(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –≤–∞—É—á–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞ —á–µ—Ä–µ–∑ API
    –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –≤–∞—É—á–µ—Ä –≤–∞–ª–∏–¥–µ–Ω.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞
    voucher_code = message.text.strip()
    lang = (await api.check_language(message.chat.id)).get("lang")
    response = await api.check_voucher(message.chat.id, voucher_code)
    print(response)

    if lang == "en":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
        if response["Success"]:
            r = await api.process_voucher(message.chat.id, voucher_code, lang)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
            print(r)
            if r["Success"]:
                await message.answer("The voucher has been activated! You have received a subscription.")
            else:
                await message.answer(r["Reason"])
        else:
            await message.answer(f"Error: {response['Reason']}")
    
    elif lang == "ru":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
        if response["Success"]:
            await message.answer("–í–∞—É—á–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.")
            # –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ API
            await api.process_voucher(message.chat.id, voucher_code, lang)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {response['Reason']}")
    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
#--------------------------------------------------------------------------

@router.message(Command('help'))
async def help(message: types.Message):
    text, markup = await bot_logic.help_cmd(message.chat.id)
    await message.answer(text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.message(Command('language'))
async def help(message: types.Message):
    text, markup = await bot_logic.language_cmd(message.chat.id)
    await message.answer(text, reply_markup=markup)
#--------------------------------------------------------------------------

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ /admin
@router.message(Command('admin'))
async def admin(message: types.Message):
    r = await api.is_admin(message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admins_cmd(message)
        await message.answer(text, reply_markup=markup, )
#--------------------------------------------------------------------------
# #–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç 
@router.message(F.text)
async def anymsg(message: Message, bot: Bot, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞
    if current_state != VoucherStates.waiting_for_voucher.state:
        text, markup = await bot_logic.menu_cmd(message)
        await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup)

#|===========================[End Commands]===========================|




# CALLBACKS #
#|=============================[Utils]=============================|
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'back'
@router.callback_query(F.data.startswith("menu "))
async def back(call: types.CallbackQuery):
    text, markup = await bot_logic.menu_cmd(call.message)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

# –ö–æ–ª–ª–±–µ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è 
@router.callback_query(F.data.startswith("agree "))
async def agree(call: types.CallbackQuery):
    text, markup = await bot_logic.agree(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("decline "))
async def decline(call: types.CallbackQuery):
    text, markup = await bot_logic.decline(call.message.chat.id)
    try:
        # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.bot.send_message(chat_id=call.message.chat.id, text=text, reply_markup=markup)
    except Exception as e:
        print(f"Error sending message: {e}")
#|===========================[End utils]===========================|

#|=============================[Admin panel buttons]=============================|
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'admin_users'
@router.callback_query(F.data.startswith("admin_users "))
async def admin_users(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_users(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'admin_ban'
@router.callback_query(F.data.startswith("admin_ban "))
async def admin_ban(call: types.CallbackQuery):
    var = call.data.split(" ")
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_ban(call.message, var[2])
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'admin_unban'
@router.callback_query(F.data.startswith("admin_unban "))
async def admin_unban(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_unban(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
@router.callback_query(F.data.startswith("admin_create_voucher "))
async def admin_create_voucher(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_create_voucher(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
@router.callback_query(F.data.startswith("admin_create_voucher_one "))
async def admin_create_voucher_one(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_create_voucher_one(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
@router.callback_query(F.data.startswith("admin_create_voucher_six "))
async def admin_create_voucher_six(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_create_voucher_six(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
@router.callback_query(F.data.startswith("admin_create_voucher_year "))
async def admin_create_voucher_year(call: types.CallbackQuery):
    r = await api.is_admin(call.message.chat.id)
    if r['Success']:
        text, markup = await bot_logic.admin_create_voucher_year(call.message)
        await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------


#|=============================[Menu buttons]=============================|
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'config_gen'
@router.callback_query(F.data.startswith("config_gen "))
async def config_gen(call: types.CallbackQuery):
    text, markup = await bot_logic.config_gen(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'countries'
@router.callback_query(F.data.startswith("config_menu "))
async def config_menu(call: types.CallbackQuery):
    text, markup = await bot_logic.config_menu(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'delete'
@router.callback_query(F.data.startswith("delete "))
async def delete(call: types.CallbackQuery):
    await call.message.delete()
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'create_config'
@router.callback_query(F.data.startswith("create_config "))
async def create_config(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã.
    
    Args:
        call (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        _, tgid, hostname = call.data.split(" ")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Ä–∞–∑–º–µ—Ç–∫—É –∏ —Ñ–∞–π–ª QR-–∫–æ–¥–∞ –æ—Ç –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
        text, markup, markup_delete, qr_file, lang = await bot_logic.create_config(call.message, hostname)
        print(lang)
        if lang == "en":
            if qr_file:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ñ–æ—Ç–æ
                await call.message.answer_photo(
                    photo=types.FSInputFile(qr_file), 
                    caption=f"<code>{text}</code>", reply_markup=markup_delete
                )

                menu_text = lang_text.menu_en
            
                await call.message.answer(text = menu_text, reply_markup=markup)

            else:
                # If no QR file, send only the text
                await call.message.answer(
                    text=text,
                    reply_markup=markup
                )

        elif lang == "ru":
            if qr_file:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ñ–æ—Ç–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                await call.message.answer_photo(
                    photo=types.FSInputFile(qr_file), 
                    caption=f"<code>{text}</code>", reply_markup=markup_delete
                )

                menu_text = lang_text.menu_ru
            
                await call.message.answer(text=menu_text, reply_markup=markup)

            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ QR –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                await call.message.answer(
                    text=text,
                    reply_markup=markup
                )

    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        if lang == "en":
            await call.message.answer(
                text=f"File not found. Please try again later.\n<code>{text}</code>", 
                reply_markup=markup
            )
        elif lang == "ru":
            await call.message.answer(
                text=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n<code>{text}</code>", 
                reply_markup=markup
            )

    except ValueError as e:
        if lang == "en":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö callback
            logging.error(f"Error in callback data: {e}")
            await call.message.answer(
                text="Invalid data. Please try again.",
                reply_markup=markup
            )
        elif lang == "ru":
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö callback: {e}")
            await call.message.answer(
                text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=markup
            )

    except Exception as e:
        if lang == "en":
            # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            logging.error(f"Unknown error: {e}")
            await call.message.answer(
                text="An error occurred while processing your request.",
                reply_markup=markup
            )
        elif lang == "ru":
            # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await call.message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=markup
            )
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'learn more'
@router.callback_query(F.data.startswith("learn_more "))
async def learn_more(call: types.CallbackQuery):
    text, markup = await bot_logic.learn_more(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'en_language '
@router.callback_query(F.data.startswith("en_language "))
async def en_language(call: types.CallbackQuery):
    lang = "en"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    commands = [
        types.BotCommand(command="/start", description="Start interacting with the bot"),
        types.BotCommand(command="/menu", description="Display the menu"),
        types.BotCommand(command="/voucher", description="Activate a voucher"),
        types.BotCommand(command="/language", description="Change bot language"),
        types.BotCommand(command="/help", description="Get help on using the bot")
    ]
    await call.message.bot.set_my_commands(commands)
    text, markup = await bot_logic.set_language(call.message, lang)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'ru_language'
@router.callback_query(F.data.startswith("ru_language "))
async def ru_language(call: types.CallbackQuery):
    lang = "ru"
    commands = [
            types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"),
            types.BotCommand(command="/menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="/voucher", description="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—É—á–µ—Ä"),
            types.BotCommand(command="/language", description="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞"),
            types.BotCommand(command="/help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞")
        ]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.bot.set_my_commands(commands)
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
    logging.info(f"User {call.from_user.id} selected language: {lang}")
    
    # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        text, markup = await bot_logic.set_language(call.message, lang)
        logging.info("Language set successfully, preparing to edit message.")
    except Exception as e:
        logging.error(f"Error while setting language: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞.")
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await call.message.edit_text(text=text, reply_markup=markup)

#--------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'account_menu'
@router.callback_query(F.data.startswith("account_menu "))
async def account_menu(call: types.CallbackQuery):
    text, markup = await bot_logic.account_menu(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
@router.callback_query(F.data.startswith("top_up_balance "))
async def top_up_balance(call: types.CallbackQuery):
    text, markup = await bot_logic.top_up_balance(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("pay_with_crypto "))
async def pay_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.pay_with_crypto(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("pay_with_usdt "))
async def pay_with_usdt(call: types.CallbackQuery):
    text, markup = await bot_logic.pay_with_usdt(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("pay_with_btc "))
async def pay_with_btc(call: types.CallbackQuery):
    text, markup = await bot_logic.pay_with_btc(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("pay_with_ltc "))
async def pay_with_ltc(call: types.CallbackQuery):
    text, markup = await bot_logic.pay_with_ltc(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

@router.callback_query(F.data.startswith("pay_with_ton "))
async def pay_with_ton(call: types.CallbackQuery):
    text, markup = await bot_logic.pay_with_ton(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------



#USDT TRC-20 –æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data.startswith("usdt_one_month_subscription "))
async def one_month_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.one_month_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#USDT TRC-20 –æ–ø–ª–∞—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
@router.callback_query(F.data.startswith("usdt_six_months_subscription "))
async def six_months_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.six_months_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#USDT TRC-20 –æ–ø–ª–∞—Ç–∞ –Ω–∞ –≥–æ–¥
@router.callback_query(F.data.startswith("usdt_year_subscription "))
async def year_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.year_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#BTC –æ–ø–ª–∞—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
@router.callback_query(F.data.startswith("btc_six_months_subscription "))
async def six_months_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.six_months_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#BTC –æ–ø–ª–∞—Ç–∞ –Ω–∞ –≥–æ–¥
@router.callback_query(F.data.startswith("btc_year_subscription "))
async def year_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.year_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#LTC –æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data.startswith("ltc_one_month_subscription "))
async def one_month_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.one_month_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#LTC –æ–ø–ª–∞—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
@router.callback_query(F.data.startswith("ltc_six_months_subscription "))
async def six_months_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.six_months_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#LTC –æ–ø–ª–∞—Ç–∞ –Ω–∞ –≥–æ–¥
@router.callback_query(F.data.startswith("ltc_year_subscription "))
async def year_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.year_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#TON –æ–ø–ª–∞—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü
@router.callback_query(F.data.startswith("ton_one_month_subscription "))
async def one_month_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.one_month_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#TON –æ–ø–ª–∞—Ç–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
@router.callback_query(F.data.startswith("ton_six_months_subscription "))
async def six_months_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.six_months_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------

#TON –æ–ø–ª–∞—Ç–∞ –Ω–∞ –≥–æ–¥
@router.callback_query(F.data.startswith("ton_year_subscription "))
async def year_subscription(call: types.CallbackQuery):
    text, markup = await bot_logic.year_subscription(call.message.chat.id)
    await call.message.edit_text(text=text, reply_markup=markup)
#--------------------------------------------------------------------------
