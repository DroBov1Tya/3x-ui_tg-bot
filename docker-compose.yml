services:


    bot:
        hostname: bot
        container_name: bot
        build: 
            context: ./bot
        environment:
            BOT_TOKEN_PROD: ${BOT_TOKEN_PROD}
            BOT_TOKEN_DEV: ${BOT_TOKEN_DEV}
            BOT_DEBUG: ${BOT_DEBUG}
            REDIS_DSN: ${REDIS_DSN}
            FASTAPI_KEY: ${FASTAPI_KEY}
            ADMINS: ${ADMINS}
            ONEMONTH : ${ONEMONTH}
            SIXMONTH: ${SIXMONTH}
            YEAR: ${YEAR}
        restart: always
        depends_on:
            - redis    
            - psql
        networks:
            - 3xui_network


    web:
        hostname: web
        container_name: web
        build: 
            context: ./web
        environment:
            REDIS_DSN: ${REDIS_DSN}
            REDIS_EXPIRE: ${REDIS_EXPIRE}
            FASTAPI_KEY: ${FASTAPI_KEY}
        ports:
            - "80:80"
        restart: always
        depends_on:
            - api
            - redis    
        networks:
            - 3xui_network


    checker:
        hostname: checker
        container_name: checker
        build: 
            context: ./checker
        environment:
            FASTAPI_KEY: ${FASTAPI_KEY}
        restart: always
        depends_on:
            - psql  
            - api
            - redis  
        networks:
            - 3xui_network


    api:
        hostname: fastapi
        container_name: fastapi
        build: 
            context: ./api
        environment:
            FASTAPI_KEY: ${FASTAPI_KEY}
            FASTAPI_DEBUG: ${FASTAPI_DEBUG}
            POSTGRES_DSN: "postgresql://postgres:${POSTGRES_PASSWD}@psql:5432/${POSTGRES_DB}"
            REDIS_DSN: ${REDIS_DSN}
            REDIS_EXPIRE: ${REDIS_EXPIRE}
            CRYPTOBOT_TOKEN: ${CRYPTOBOT_TOKEN}
            CRYPTOBOT_TOKEN_DEBUG: ${CRYPTOBOT_TOKEN_DEBUG}
            CRYPTOBOT_DEBUG: ${CRYPTOBOT_DEBUG}
        command: bash -c 'while !</dev/tcp/psql/5432; do sleep 1; done; uvicorn main:app --host 0.0.0.0'
        ports:
            - "8000:8000"
        restart: always
        depends_on:
            # - redis    
            - psql
        networks:
            - 3xui_network



    psql:
        image: postgres:15
        hostname: psql
        container_name: psql
        restart: always
        volumes:
            - psql-data:/var/lib/postgresql/data/
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - "5432:5432"
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWD}
            POSTGRES_DB: ${POSTGRES_DB}
            TZ: Europe/Moscow
        networks:
            - 3xui_network


    redis:
        image: redis:7.2
        hostname: redis
        container_name: redis
        restart: always
        healthcheck:
            test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
            interval: 10m10s
        ports:
            - "6379:6379"
        networks:
            - 3xui_network


    loki:
        image: grafana/loki:2.0.0
        hostname: loki
        restart: always
        # ports:
        #     - "3100:3100"
        volumes:
            - ./loki-config.yaml:/etc/loki/local-config.yaml
        networks:
            - logging_network

    promtail:
        image: grafana/promtail:2.0.0
        restart: always
        volumes:
            - /var/log:/var/log
            - /var/lib/docker/containers:/var/lib/docker/containers
            - /var/run/docker.sock:/var/run/docker.sock
            - ./promtail-config.yml:/etc/promtail/config.yml
        command:
            -config.file=/etc/promtail/config.yml
        depends_on:
            - loki
        networks:
            - logging_network

    grafana:
        image: grafana/grafana:latest
        restart: always
        ports:
            - "3000:3000"
        environment:
            GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
            GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
        depends_on:
            - loki
        networks:
            - logging_network




volumes:
    psql-data: 
    esdata:


networks:
    3xui_network:
        driver: bridge
    logging_network:
        driver: bridge